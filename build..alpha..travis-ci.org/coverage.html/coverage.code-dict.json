{"/home/travis/build/npmtest/node-npmtest-critical/test.js":"/* istanbul instrument in package npmtest_critical */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-critical/lib.npmtest_critical.js":"/* istanbul instrument in package npmtest_critical */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_critical = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_critical = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-critical/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-critical && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_critical */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_critical\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_critical.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_critical.rollup.js'] =\n            local.assetsDict['/assets.npmtest_critical.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_critical.__dirname +\n                    '/lib.npmtest_critical.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-critical/critical/index.js":"'use strict';\nvar path = require('path');\nvar fs = require('fs-extra');\nvar _ = require('lodash');\nvar sourceInliner = require('inline-critical');\nvar Bluebird = require('bluebird');\nvar through2 = require('through2');\nvar PluginError = require('gulp-util').PluginError;\nvar replaceExtension = require('gulp-util').replaceExtension;\n\nvar core = require('./lib/core');\nvar file = require('./lib/file-helper');\nvar inliner = require('./lib/inline-styles');\n\nBluebird.promisifyAll(fs);\n\n/**\n * Normalize options\n *\n * @param opts\n */\nfunction prepareOptions(opts) {\n    if (!opts) {\n        opts = {};\n    }\n\n    var options = _.defaults(opts, {\n        base: file.guessBasePath(opts),\n        dimensions: [{\n            height: opts.height || 900,\n            width: opts.width || 1300\n        }]\n    });\n\n    // set dest relative to base if isn't specivied absolute\n    if (options.dest && !path.isAbsolute(options.dest)) {\n        options.dest = path.join(options.base, options.dest);\n    }\n\n    // set dest relative to base if isn't specivied absolute\n    if (options.destFolder && !path.isAbsolute(options.destFolder)) {\n        options.destFolder = path.join(options.base, options.destFolder);\n    }\n\n    return options;\n}\n\n/**\n * Critical path CSS generation\n * @param  {object} opts Options\n * @param  {function} cb Callback\n * @accepts src, base, width, height, dimensions, dest\n * @return {Promise}|undefined\n */\nexports.generate = function (opts, cb) {\n    opts = prepareOptions(opts);\n\n    // generate critical css\n    var corePromise = core.generate(opts);\n\n    // @deprecated\n    // should be removed in next major release\n    if (opts.styleTarget) {\n        corePromise.then(function (output) {\n            var file = path.resolve(opts.styleTarget);\n            var dir = path.dirname(file);\n            return fs.ensureDirAsync(dir).then(function () {\n                return fs.writeFileAsync(path.resolve(opts.styleTarget), output);\n            });\n        });\n    }\n\n    // inline\n    if (opts.inline) {\n        corePromise = Bluebird.props({\n            file: file.getVinylPromise(opts),\n            css: corePromise\n        }).then(function (result) {\n            return sourceInliner(result.file.contents.toString(), result.css, {\n                minify: opts.minify || false,\n                extract: opts.extract || false,\n                basePath: opts.base || process.cwd()\n            });\n        });\n    }\n\n    // save to file\n    if (opts.dest) {\n        corePromise = corePromise.then(function (output) {\n            var file = path.resolve(opts.dest);\n            var dir = path.dirname(file);\n            return fs.ensureDirAsync(dir).then(function () {\n                return fs.writeFileAsync(path.resolve(opts.dest), output);\n            }).then(function () {\n                return output;\n            });\n        });\n    }\n\n    // return promise if callback is not defined\n    if (_.isFunction(cb)) {\n        corePromise.catch(function (err) {\n            cb(err);\n            throw new Bluebird.CancellationError();\n        }).then(function (output) {\n            cb(null, output.toString());\n        }).catch(Bluebird.CancellationError, function () {\n        }).done();\n    } else {\n        return corePromise;\n    }\n};\n\n/**\n * deprecated will be removed in the next version\n * @param opts\n * @param cb\n * @returns {Promise}|undefined\n */\nexports.generateInline = function (opts, cb) {\n    opts.inline = true;\n    if (opts.htmlTarget) {\n        opts.dest = opts.htmlTarget;\n    } else if (opts.styleTarget) {\n        // return error\n    }\n\n    return exports.generate(opts, cb);\n};\n\n/**\n * Critical path CSS inlining\n * @param  {object} opts Options\n * @param  {function} cb Callback\n * @accepts src, base, dest\n * @deprecated\n */\nexports.inline = function (opts, cb) {\n    opts = opts || {};\n    cb = cb || function () {};\n\n    if (!opts.src || !opts.base) {\n        throw new Error('A valid source and base path are required.');\n    }\n\n    // Inline the critical path CSS\n    fs.readFile(path.join(opts.base, opts.src), function (err, data) {\n        if (err) {\n            cb(err);\n            return;\n        }\n\n        var out = inliner(data, opts);\n\n        if (opts.dest) {\n            // Write HTML with inlined CSS to dest\n            fs.writeFile(path.resolve(opts.dest), out, function (err) {\n                if (err) {\n                    cb(err);\n                    return;\n                }\n\n                cb(null, out.toString());\n            });\n        } else {\n            cb(null, out.toString());\n        }\n    });\n};\n\n/**\n * Streams wrapper for critical\n *\n * @param {object} opts\n * @returns {*}\n */\nexports.stream = function (opts) {\n    // return stream\n    return through2.obj(function (file, enc, cb) {\n        if (file.isNull()) {\n            return cb(null, file);\n        }\n\n        if (file.isStream()) {\n            return this.emit('error', new PluginError('critical', 'Streaming not supported'));\n        }\n\n        var options = _.assign(opts || {}, {\n            src: file\n        });\n\n        exports.generate(options, function (err, data) {\n            if (err) {\n                return cb(new PluginError('critical', err.message));\n            }\n\n            // rename file if not inlined\n            if (!opts.inline) {\n                file.path = replaceExtension(file.path, '.css');\n            }\n\n            file.contents = new Buffer(data);\n            cb(err, file);\n        });\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-critical/critical/lib/core.js":"'use strict';\nvar fs = require('fs');\nvar os = require('os');\nvar path = require('path');\nvar url = require('url');\nvar http = require('http');\nvar _ = require('lodash');\nvar penthouse = require('penthouse');\nvar CleanCSS = require('clean-css');\nvar filterCss = require('filter-css');\nvar oust = require('oust');\nvar postcss = require('postcss');\nvar imageInliner = require('postcss-image-inliner');\nvar Bluebird = require('bluebird');\nvar tempfile = require('tempfile');\nvar getPort = require('get-port');\nvar finalhandler = require('finalhandler');\nvar serveStatic = require('serve-static');\nvar debug = require('debug')('critical:core');\n\nvar file = require('./file-helper');\nvar gc = require('./gc');\n\n// promisify fs and penthouse\nBluebird.promisifyAll(fs);\nvar penthouseAsync = Bluebird.promisify(penthouse);\n\n/**\n * returns a string of combined and deduped css rules.\n * @param cssArray\n * @returns {String}\n */\nfunction combineCss(cssArray) {\n    if (cssArray.length === 1) {\n        return cssArray[0].toString();\n    }\n\n    return new CleanCSS({\n        level: {\n            1: {\n                all: true\n            },\n            2: {\n                all: false,\n                removeDuplicateFontRules: true,\n                removeDuplicateMediaBlocks: true,\n                removeDuplicateRules: true,\n                mergeMedia: true\n            }\n        }\n    }).minify(\n        _.invokeMap(cssArray, 'toString').join(' ')\n    ).styles;\n}\n\n/**\n * Start server for penthouse\n *\n * @param opts\n * @returns {Promise}\n */\nfunction startServer(opts) {\n    var cb = serveStatic(opts.base);\n\n    return getPort().then(function (port) {\n        var server = http.createServer(function (req, res) {\n            var done = finalhandler(req, res);\n            cb(req, res, done);\n        }).listen(port);\n\n        return {\n            instance: server,\n            port: port\n        };\n    });\n}\n\n/**\n * Append stylesheets to result\n * @param opts\n * @returns {function}\n */\nfunction appendStylesheets(opts) {\n    return function (htmlfile) {\n        // consider opts.css and map to array if it's a string\n        if (opts.css) {\n            htmlfile.stylesheets = typeof opts.css === 'string' ? [opts.css] : opts.css;\n            return htmlfile;\n        }\n\n        // Oust extracts a list of your stylesheets\n        var stylesheets = oust(htmlfile.contents.toString(), 'stylesheets');\n        debug('appendStylesheets', stylesheets);\n        stylesheets = stylesheets.map(file.resourcePath(htmlfile, opts));\n        return Bluebird.map(stylesheets, file.assertLocal(opts)).then(function (stylesheets) {\n            htmlfile.stylesheets = stylesheets;\n            return htmlfile;\n        });\n    };\n}\n\n/**\n * Inline images using postcss-image-inliner\n * @param opts\n * @returns {function}\n */\nfunction inlineImages(opts) {\n    return function (vinyl) {\n        if (opts.inlineImages) {\n            var assetPaths = opts.assetPaths || [];\n\n            // Add some suitable fallbacks for convinience if nothing is set.\n            // Otherwise don't add them to keep the user in control\n            if (assetPaths.length === 0) {\n                assetPaths.push(path.dirname(vinyl.path));\n                // Add domain as asset source for external domains\n                if (file.isExternal(opts.src)) {\n                    var urlObj = url.parse(opts.src);\n                    var domain = urlObj.protocol + '//' + urlObj.host;\n                    assetPaths.push(domain, domain + path.dirname(urlObj.pathname));\n                }\n\n                if (opts.base) {\n                    assetPaths.push(opts.base);\n                }\n            }\n\n            var inlineOptions = {\n                assetPaths: _.uniq(assetPaths),\n                maxFileSize: opts.maxImageFileSize || 10240\n            };\n            debug('inlineImages', inlineOptions);\n            return postcss([imageInliner(inlineOptions)])\n                .process(vinyl.contents.toString('utf8'))\n                .then(function (contents) {\n                    vinyl.contents = new Buffer(contents.css);\n                    return vinyl;\n                });\n        }\n\n        return vinyl;\n    };\n}\n\n/**\n * Helper function create vinyl objects\n * @param opts\n * @returns {function}\n */\nfunction vinylize(opts) {\n    return function (filepath) {\n        debug('vinylize', path.resolve(filepath));\n        return file.getVinylPromise({\n            src: path.resolve(filepath),\n            base: opts.base\n        });\n    };\n}\n\n/**\n * Read css source, inline images and normalize relative paths\n * @param opts\n * @returns {function}\n */\nfunction processStylesheets(opts) {\n    return function (htmlfile) {\n        debug('processStylesheets', htmlfile.stylesheets);\n        return Bluebird.map(htmlfile.stylesheets, vinylize(opts))\n            .map(inlineImages(opts))\n            .map(file.replaceAssetPaths(htmlfile, opts))\n            .reduce(function (total, stylesheet) {\n                return total + os.EOL + stylesheet.contents.toString('utf8');\n            }, '')\n            .then(function (css) {\n                htmlfile.cssPath = tempfile('.css');\n                // add file to garbage collector so it get's removed on exit\n                gc.addFile(htmlfile.cssPath);\n\n                return fs.writeFileAsync(htmlfile.cssPath, css).then(function () {\n                    return htmlfile;\n                });\n            });\n    };\n}\n\n/**\n * Fire up a server as pentouse doesn't like filesystem paths on windows\n * and let pentouse compute the critical css for us\n * @param dimensions\n * @param {object} opts Options passed to critical\n * @returns {function}\n */\nfunction computeCritical(dimensions, opts) {\n    return function (htmlfile) {\n        return startServer(opts).then(function (server) {\n            debug('Processing: ' + htmlfile.path + ' [' + dimensions.width + 'x' + dimensions.height + ']');\n            return penthouseAsync({\n                url: file.getPenthouseUrl(opts, htmlfile, server.port),\n                css: htmlfile.cssPath,\n                forceInclude: opts.include || [],\n                timeout: opts.timeout,\n                maxEmbeddedBase64Length: opts.maxImageFileSize || 10240,\n                width: dimensions.width,\n                height: dimensions.height\n            }).finally(function () {\n                server.instance.close();\n            });\n        });\n    };\n}\n\n/**\n * Critical path CSS generation\n * @param  {object} opts Options\n * @accepts src, base, width, height, dimensions, dest\n * @return {Promise}\n */\nfunction generate(opts) {\n    opts = opts || {};\n\n    if (!opts.src && !opts.html) {\n        return Bluebird.reject(new Error('A valid source is required.'));\n    }\n\n    if (!opts.dimensions) {\n        opts.dimensions = [{\n            height: opts.height || 900,\n            width: opts.width || 1300\n        }];\n    }\n\n    debug('Start with the following options');\n    debug(opts);\n\n    return Bluebird.map(opts.dimensions, function (dimensions) {\n        // use content to fetch used css files\n        return file.getVinylPromise(opts)\n            .then(appendStylesheets(opts))\n            .then(processStylesheets(opts))\n            .then(computeCritical(dimensions, opts));\n    }).then(function (criticalCSS) {\n        criticalCSS = combineCss(criticalCSS);\n\n        if (opts.ignore) {\n            debug('generate', 'Applying filter', opts.ignore);\n            criticalCSS = filterCss(criticalCSS, opts.ignore, opts.ignoreOptions || {});\n        }\n\n        if (opts.minify === true) {\n            debug('generate', 'Minify css');\n            criticalCSS = new CleanCSS().minify(criticalCSS).styles;\n        }\n\n        debug('generate', 'Done');\n        return criticalCSS;\n    });\n}\n\nexports.generate = generate;\n","/home/travis/build/npmtest/node-npmtest-critical/critical/lib/file-helper.js":"'use strict';\nvar os = require('os');\nvar fs = require('fs');\nvar url = require('url');\nvar path = require('path');\nvar _ = require('lodash');\nvar Bluebird = require('bluebird');\nvar request = require('request');\nvar debug = require('debug')('critical:file');\nvar mime = require('mime-types');\nvar slash = require('slash');\nvar oust = require('oust');\nvar chalk = require('chalk');\nvar tmp = require('tmp');\n// Use patched vinyl to allow remote paths\nvar File = require('./vinyl-remote');\nvar gc = require('./gc');\n\nBluebird.promisifyAll(tmp);\nBluebird.promisifyAll(fs);\ntmp.setGracefulCleanup();\n\n/**\n * get first array entry\n * @param {array} data\n * @returns {*}\n */\nfunction getFirst(data) {\n    return _.isArray(data) ? _.first(data) : data;\n}\n\n/**\n * Fixup slashes in file paths for windows\n * @param {string} str path\n * @returns {string}\n */\nfunction normalizePath(str) {\n    return process.platform === 'win32' ? slash(str) : str;\n}\n\n/**\n * Helper function to rewrite the file paths relative to the stylesheet\n * to be relative to the html file\n * @param {File} html\n * @param opts\n * @returns {function}\n */\nfunction replaceAssetPaths(html, opts) {\n    // set dest path with fallback to html path\n    var destPath = opts.destFolder || (opts.dest && path.dirname(opts.dest)) || path.dirname(html.path);\n    var destPathResolved = path.resolve(destPath);\n    var baseResolved = path.resolve(opts.base);\n\n    /**\n     * the resulting function should get passed an vinyl object with the css file\n     */\n    return function (stylesheet) {\n        // normalize relative paths\n        var css = stylesheet.contents.toString().replace(/url\\(['\"]?([^'\"\\\\)]+)['\"]?\\)/g, function (match, assetPath) {\n            // skip absolute paths, urls and data-uris\n            if (/^data:/.test(assetPath) || /(?:^\\/)|(?::\\/\\/)/.test(assetPath)) {\n                return match;\n            }\n\n            // create asset path relative to opts.base\n            var stylesheetPath = path.dirname(stylesheet.path);\n            var assetRelative = path.relative(baseResolved, path.resolve(path.join(stylesheetPath, assetPath)));\n\n            // compute path prefix default relative to html\n            var pathPrefixDefault = path.relative(destPathResolved, baseResolved);\n\n            var pathPrefix = (typeof opts.pathPrefix === 'undefined') ? pathPrefixDefault : opts.pathPrefix;\n\n            return normalizePath(match.replace(assetPath, path.join(pathPrefix, assetRelative)));\n        });\n\n        stylesheet.contents = new Buffer(css);\n        return stylesheet;\n    };\n}\n\n/**\n * Get html path for penthouse\n * Needs to be an absolute file:// url for local files to work on windows\n * @param {object} opts Options passed to critical\n * @param {File} file Vinyl file object of html file\n * @param {string} port Server port\n * @returns {string}\n */\nfunction getPenthouseUrl(opts, file, port) {\n    if (opts.src && isExternal(opts.src)) {\n        return opts.src;\n    }\n\n    return 'http://127.0.0.1:' + port + '/' + normalizePath(path.relative(path.resolve(file.base), file.path));\n}\n\n/**\n * Check wether a resource is external or not\n * @param {string} href\n * @returns {boolean}\n */\nfunction isExternal(href) {\n    return /(^\\/\\/)|(:\\/\\/)/.test(href);\n}\n\n/**\n * Generate temp file from request response object\n * @param {object} opts Options passed to critical\n * @returns {function}\n */\nfunction temp(opts) {\n    return function (resp) {\n        var contentType = resp.headers['content-type'];\n        return tmp.fileAsync(_.assign(opts, {postfix: '.' + mime.extension(contentType)}))\n            .then(getFirst)\n            .then(function (path) {\n                gc.addFile(path);\n                return fs.writeFileAsync(path, resp.body).then(function () {\n                    return path;\n                });\n            });\n    };\n}\n\n/**\n * Get external resource\n * @param {string} uri\n * @returns {Promise}\n */\nfunction requestAsync(uri) {\n    return new Bluebird(function (resolve, reject) {\n        // handle protocol-relative urls\n        uri = url.resolve('http://te.st', uri);\n        request(uri, function (err, resp) {\n            if (err) {\n                return reject(err);\n            }\n            if (resp.statusCode === 403 || resp.statusCode === 404) {\n                console.log('Ignoring', uri, '(' + resp.statusCode + ')');\n                resp.body = '';\n                return resolve(resp);\n            }\n\n            if (resp.statusCode !== 200) {\n                return reject(new Error('Wrong status code ' + resp.statusCode + ' for ' + uri));\n            }\n\n            resolve(resp);\n        });\n    });\n}\n\n/**\n * Get default base path based on options\n * @param {object} opts Options passed to critical\n * @returns {string}\n */\nfunction guessBasePath(opts) {\n    if (opts.src && !isExternal(opts.src) && !isVinyl(opts.src)) {\n        return path.dirname(opts.src);\n    } else if (opts.src && isVinyl(opts.src)) {\n        return opts.src.dirname;\n    }\n\n    return process.cwd();\n}\n\n/**\n * Wrapper for File.isVinyl to detect vinyl objects generated by gulp (vinyl < v0.5.6)\n * @param {*} file\n * @returns {string}\n */\nfunction isVinyl(file) {\n    return File.isVinyl(file) ||\n        file instanceof File ||\n        (file && /function File\\(/.test(file.constructor.toString()) && file.contents && file.path);\n}\n\n/**\n * Returns a promise to a local file\n * @param {object} opts Options passed to critical\n * @returns {function}\n */\nfunction assertLocal(opts) {\n    return function (filePath) {\n        if (!isExternal(filePath)) {\n            return new Bluebird(function (resolve) {\n                resolve(filePath);\n            });\n        }\n        return requestAsync(filePath)\n            .then(temp({\n                dir: opts.base\n            }));\n    };\n}\n\n/**\n * Resolve path to file\n * @param {File} htmlfile Vinyl file object of html file\n * @param {object} opts Options passed to critical\n * @returns {function}\n */\nfunction resourcePath(htmlfile, opts) {\n    return function (filepath) {\n        if (isExternal(filepath)) {\n            debug('resourcePath - remote', filepath);\n            return filepath;\n        }\n\n        if (isExternal(htmlfile.history[0])) {\n            debug('resourcePath - remote', htmlfile.history[0]);\n            return url.resolve(htmlfile.history[0], filepath);\n        }\n\n        if (/(?:^\\/)/.test(filepath)) {\n            return path.join(opts.base, filepath.split('?')[0]);\n        }\n        var folder = path.relative(opts.base, path.dirname(htmlfile.path));\n        if (folder) {\n            debug('resourcePath - folder', folder);\n        }\n        return path.join(path.dirname(htmlfile.path), filepath.split('?')[0]);\n    };\n}\n\n/**\n * Compute a source path which fits to the directory structure\n * so that relative links could be resolved\n * @param {object} opts Options passed to critical\n * @returns {string}\n */\nfunction generateSourcePath(opts) {\n    var html = opts.html;\n\n    if (typeof opts.src !== 'undefined') {\n        return path.dirname(opts.src);\n    }\n\n    if (typeof opts.folder !== 'undefined') {\n        var folder = path.isAbsolute(opts.folder) ? opts.folder : path.join(opts.base, opts.folder);\n        opts.pathPrefix = path.relative(opts.folder, opts.base);\n        return folder;\n    }\n\n    if (!opts.pathPrefix) {\n        var links = oust(html, 'stylesheets');\n\n        debug('generateSourcePath - links', links);\n        // we can only determine a valid path by checking relative links\n        var relative = _.chain(links).omitBy(function (link) {\n            return /^data:/.test(link) || /(?:^\\/)|(?::\\/\\/)/.test(link);\n        }).toArray().value();\n\n        debug('generateSourcePath - relative', relative);\n\n        if (relative.length === 0) {\n            process.stderr.write([\n                chalk.red('Warning:'),\n                'Missing html source path. Consider \\'folder\\' option.',\n                'https://goo.gl/PwvFVb',\n                os.EOL\n            ].join(' '));\n\n            opts.pathPrefix = '/';\n            return opts.base;\n        }\n\n        var dots = _.map(relative, function (link) {\n            var match = /^(\\.\\.\\/)+/.exec(link);\n            return _.first(match);\n        });\n\n        opts.pathPrefix = _.chain(dots).sortBy('length').last().value() || '';\n        debug('generateSourcePath', opts.pathPrefix.replace(/\\.\\./g, '~'));\n    }\n\n    return path.join(opts.base, opts.pathPrefix.replace(/\\.\\./g, '~'));\n}\n\n/**\n * Get vinyl object based on options\n * could either be a html string or a local file.\n * If opts.src already is a vinyl object it gets returnd without modifications\n * @param {object} opts Options passed to critical\n * @returns {promise} resolves to vinyl object\n */\nfunction getVinylPromise(opts) {\n    if (!(opts.src || opts.html) || !opts.base) {\n        return Bluebird.reject(new Error('A valid source and base path are required.'));\n    }\n\n    if (isVinyl(opts.src)) {\n        return new Bluebird(function (resolve) {\n            resolve(opts.src);\n        });\n    }\n\n    var file = new File({\n        base: opts.base\n    });\n\n    if (opts.src && isExternal(opts.src)) {\n        file.remotePath = opts.src;\n    } else if (opts.src) {\n        file.path = opts.src;\n    }\n\n    if (opts.html) {\n        var folder = generateSourcePath(opts);\n        debug('hacky source path folder', folder);\n\n        // html passed in directly -> create tmp file\n        return tmp.fileAsync({dir: opts.base, postfix: '.html'})\n            .then(getFirst)\n            .then(function (filepath) {\n                file.path = filepath;\n                file.path = path.join(folder, path.basename(filepath));\n                file.base = folder;\n                file.contents = new Buffer(opts.html);\n                gc.addFile(filepath);\n                return fs.writeFileAsync(filepath, file.contents).then(function () {\n                    return file;\n                });\n            });\n    }\n\n    // use src file provided, fetch content and return vinyl\n    return assertLocal(opts)(opts.src)\n        .then(function (data) {\n            // src can either be absolute or relative to opts.base\n            if (opts.src !== path.resolve(data) && !isExternal(opts.src)) {\n                file.path = path.join(opts.base, opts.src);\n            } else {\n                file.path = path.relative(process.cwd(), data);\n            }\n\n            return fs.readFileAsync(file.path).then(function (contents) {\n                file.contents = contents;\n                return file;\n            });\n        });\n}\n\nexports.isExternal = isExternal;\nexports.isVinyl = isVinyl;\nexports.replaceAssetPaths = replaceAssetPaths;\nexports.getPenthouseUrl = getPenthouseUrl;\nexports.guessBasePath = guessBasePath;\nexports.resourcePath = resourcePath;\nexports.assertLocal = assertLocal;\nexports.getVinylPromise = getVinylPromise;\n","/home/travis/build/npmtest/node-npmtest-critical/critical/lib/vinyl-remote.js":"/**\n * Allow remote paths in vinyl\n * Should be removed if https://github.com/gulpjs/vinyl/issues/127\n * is accepted and released.\n */\n\n'use strict';\nvar url = require('url');\nvar File = require('vinyl');\n\nObject.defineProperty(File.prototype, 'remotePath', {\n    get: function () {\n        return this.history[this.history.length - 1];\n    },\n    set: function (remotePath) {\n        if (typeof remotePath !== 'string') {\n            throw new Error('path should be a string.');\n        }\n\n        // check url\n        if (!/(^\\/\\/)|(:\\/\\/)/.test(remotePath)) {\n            this.path = remotePath;\n            return;\n        }\n\n        var urlObj = url.parse(remotePath);\n        remotePath = urlObj.protocol + '//' + urlObj.host + urlObj.pathname;\n\n        // Record history only when path changed\n        if (remotePath && remotePath !== this.remotePath) {\n            this.history.push(remotePath);\n        }\n    }\n});\n\nmodule.exports = File;\n","/home/travis/build/npmtest/node-npmtest-critical/critical/lib/gc.js":"'use strict';\nvar fs = require('fs');\nvar _ = require('lodash');\nvar debug = require('debug')('critical:gc');\n\nvar files = [];\n\nfunction cleanup() {\n    files = _.uniq(files);\n    if (files.length > 0) {\n        debug('cleanup triggered. Unlinking temp files', files);\n    }\n    _.forEach(files, function (tmpfile) {\n        try {\n            fs.unlinkSync(tmpfile);\n        } catch (err) {\n            // already removed\n        }\n    });\n    files = [];\n}\n\nfunction onExit() {\n    process.emit('cleanup');\n    process.removeListener('cleanup', cleanup);\n    process.removeListener('SIGINT', onSigInt);\n    process.removeListener('exit', onExit);\n}\n\nfunction onSigInt() {\n    process.exit(2);    // eslint-disable-line unicorn/no-process-exit\n}\nprocess.on('SIGINT', onSigInt);\nprocess.on('cleanup', cleanup);\nprocess.on('exit', onExit);\n\nmodule.exports.addFile = function (file) {\n    files.push(file);\n};\n","/home/travis/build/npmtest/node-npmtest-critical/critical/lib/inline-styles.js":"/*\n This is a fork of the inline-styles module by @maxogden\n with support for minification. The original module can be\n found here: https://github.com/maxogden/inline-styles\n */\n'use strict';\nvar path = require('path');\nvar fs = require('fs');\nvar url = require('url');\nvar cheerio = require('cheerio');\nvar inliner = require('imageinliner');\nvar CleanCSS = require('clean-css');\n\nmodule.exports = function (html, opts) {\n    var base = opts.base || process.cwd();\n    var minify = opts.minify;\n    var maxImageSize = opts.maxImageFileSize || 10240;\n    var dom = cheerio.load(String(html), {\n        decodeEntities: false\n    });\n\n    injectStyles(dom);\n\n    return new Buffer(dom.html());\n\n    function injectStyles(dom) {\n        dom('link').each(function (idx, el) {\n            el = dom(el);\n            var href = el.attr('href');\n\n            if (el.attr('rel') === 'stylesheet' && isLocal(href)) {\n                var dir = base + path.dirname(href);\n                var file = path.join(base, href);\n                var style = fs.readFileSync(file);\n                var inlinedStyles;\n\n                // #40 already inlined background images cause problems with imageinliner\n                if (opts.inlineImages) {\n                    var inlined = inliner.css(style.toString(), {maxImageFileSize: maxImageSize, cssBasePath: dir});\n                    inlinedStyles = inlined.toString();\n                } else {\n                    inlinedStyles = style.toString();\n                }\n\n                if (minify) {\n                    inlinedStyles = new CleanCSS().minify(inlinedStyles).styles;\n                }\n\n                inlinedStyles = rebaseRelativePaths(base, dir, inlinedStyles);\n\n                var inlinedTag = '<style>\\n' + inlinedStyles + '\\n</style>';\n                el.replaceWith(inlinedTag);\n            }\n        });\n    }\n\n    function isLocal(href) {\n        return href && !url.parse(href).hostname;\n    }\n\n    function rebaseRelativePaths(basePath, cssPath, cssStr) {\n        var beginsWith;\n        var newPath;\n        var paths = cssStr.match(/url\\((.+?)\\)/g);\n        var pathDiff = cssPath.replace(basePath).split('/').length;\n\n        if (paths) {\n            for (var i = 0, j = paths.length; i < j; i++) {\n                paths[i] = paths[i].match(/url\\((.+?)\\)/)[1];\n\n                // do nothing for absolute paths, urls and data-uris\n                if (/^data:/.test(paths[i]) || /(?:^\\/)|(?::\\/\\/)/.test(paths[i])) {\n                    continue;\n                }\n\n                beginsWith = paths[i].split('/')[0].replace(/['\"]/, '');\n\n                if (beginsWith === '..') {\n                    newPath = paths[i];\n\n                    for (var k = 0; k < pathDiff; k++) {\n                        newPath = newPath.replace('../', '');\n                    }\n\n                    cssStr = cssStr.replace(paths[i], newPath);\n                } else {\n                    // the relative path is within the cssPath, so append it\n                    newPath = cssPath.replace(basePath, '') + '/' + paths[i].replace(/['\"]/g, '');\n                    cssStr = cssStr.replace(paths[i], newPath);\n                }\n            }\n        }\n\n        return cssStr;\n    }\n};\n"}